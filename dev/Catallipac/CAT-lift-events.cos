
*new ZootLift
new: vhcl 3 1 24401 "sealift" 2 0 10
*agnt lift = targ
seta va02 targ
*enum LiftState = Stationary
setv ov00 0
*
cabn -11 -10 110 134
*Can't be picked up, Visible to creatures, Doesn't suffer physics
attr 0
*Creatures can push and pull
bhvr 3
*
cabw 12
*agnt ButtonCurrent = null
seta ov01 null
*agnt ButtonDestination = null
seta ov02 null
*numb StartY = 0
setv ov10 0
*numb StopY = 1
setv ov11 1
*agnt From = null
seta ov04 null

*agnt previousButton = null
seta va00 null
****************
***Top Button***
****************
*new ZootLiftButton
new: simp 2 12 24401 "lift" 2 14 310
*agnt Lift = lift
seta ov03 va02
*agnt ButtonAbove = previousButton
seta ov01 va00
*agnt ButtonBelow = null
seta ov02 null
*agnt previousButton = targ
seta va00 targ
*if(ButtonAbove != null)
doif ov01 <> null
*	targ ButtonAbove
	targ ov01
*	ButtonAbove.ButtonBellow = previousButton
	seta ov02 va00
*	targ PreviousButton
	targ va00
endi
*
mvto 40399 29478
*agnt From = null
seta ov04 null
*enum ButtonState = NoLift
setv ov00 0
*numb TargetX = posb
setv ov10 posb
*numb TargetX = self + 10
addv ov10 10
*numb Room = room targ
setv va01 room targ
*Mouse can activate
attr 4
*Creatures can push
bhvr 1

************
***Bottom***
************
*new ZootLiftButton
new: simp 2 12 24401 "lift" 2 14 310
*agnt Lift = lift
seta ov03 va02
*agnt ButtonAbove = previousButton
seta ov01 va00
*agnt ButtonBelow = null
seta ov02 null
*agnt previousButton = targ
seta va00 targ
*if(ButtonAbove != null)
doif ov01 <> null
*	targ ButtonAbove
	targ ov01
*	ButtonAbove.ButtonBellow = previousButton
	seta ov02 va00
*	targ PreviousButton
	targ va00
endi
mvto 40550 29725
*agnt From = null
seta ov04 null
*enum ButtonState = NoLift
setv ov00 0
*numb TargetX = posb
setv ov10 posb
*numb TargetX = self  + 10
addv ov10 10
*numb Room = room targ
setv va01 room targ
*Mouse can activate
attr 4
*Creatures can push
bhvr 1

*targ previousButton
targ va00
*numb moveLiftTo = previousbutton.TargetX
setv va03 ov10
*targ lift
targ va02
*lift.ButtonCurrent = previousButton
seta ov01 va00
*numb moveLiftTo = self - lift.hght
subv va03 hght
*mvto **** moveLiftTo
mvto 40432 va03


* Script 3 extracted from CoC_CAT.agents by Mirality REVELATION
* Thank you Mirality! -Zzzzoot

*ZootLiftButton.Push
scrp 2 12 24401 1
	lock
*!	dbg: outs "call button (activated)"
*	if(from = pntr && ButtonState = WaitingForLift)
	doif from = pntr and mv00 = 2
*		agnt From = pntr
		seta mv04 pntr
*Flash off and back on to give user feedback.
*		pose.Off *wait 5 *pose.On
		pose 0
		wait 5
		pose 1
	endi
*	if(ButtonState = NoLift)
	doif mv00 = 0
*		if(from = pntr)
		doif from = pntr
*			agnt From = pntr
			seta mv04 pntr
		endi
*		ButtonState = WaitingForLift
		setv ov00 2
*		pose.On
		pose 1
*!		dbg: outs "callin' da loop"
*		Lift.TimingLoop
		mesg writ ov03 1000
		inst
*	else(ButtonState = HasLift || ButtonState = WaitingForLift)
	else
*!		dbg: asrt mv00 = 1 or mv00 = 2
		inst
*		if(from not = null)
		doif from <> null
*!			dbg: outs "well that was dumb"
*			from.Stim(Dissapoint, 1)
			stim writ from 0 1
		endi
	endi
endm

*Going up (only by creature).
*ZootLift.Push
scrp 3 1 24401 1
	lock
*!	dbg: outs "going up (activated)"
*
	targ from
*	if(family is not Creature)
	doif fmly <> 4
		stop
	endi
	targ ownr
	inst
*	if(LiftState = Stationary)
	doif ov00 = 0
*		if(ButtonCurrent.ButtonAbove != null)
		doif avar mv01 1 <> null
*There is a button above us, we can go to it!
*			LiftState = GoingUp
			setv mv00 -1
*			ButtonDestination = ButtonCurrent.ButtonAbove
			seta mv02 avar mv01 1
			slow
*			from.Stim(Wiat, 1)
			stim writ from 75 1
*			ownr.PickUp(from)
			spas ownr from
*	set start and stop Y values
*			THINGS ARE SO BROKEN IT'S A BIT HARD TO TELL WHAT'S UP.
*			 I'LL COME BACK LATER - ZZZZOOT
			targ mv01
*			ButtonCurrent.
			setv mv10 ov10
			targ mv02
			setv mv11 ov10
			targ ownr
*	turn on light
			pose 1
*	remember who you're doing this for
			seta ov04 from
			stim writ ov04 75 0
* Aaaaand, GO!
*!			dbg: outs "callin' da loop"
			mesg writ ownr 1000
		else
*	there's no button above us!
*	stim Disappoint
*!			dbg: outs "well that was dumb"
*			from.Stim(Disappoint, 1)
			stim writ from 0 1
		endi
*	else(LiftState = GoingUp or LiftState = GoingDown)
	else
*!		dbg: asrt mv00 = -1 or mv00 = 1
*The doors are closed man, you're too late.
*!		dbg: outs "well that was dumb"
*		from.Stim(Disappoint, 1)
		stim writ from 0 1
	endi
endm

*going down (only by creature)
*ZootLift.Pull
scrp 3 1 24401 2
	lock
*!	dbg: outs "going down (activated)"
	targ from
	doif fmly <> 4
		stop
	endi
	inst
	doif ov00 = 0
*	lift is waiting
		doif avar mv01 2 <> null
*	there is a button above us, we can go to it!
*	set lift to "going up"
			setv mv00 -1
*	set lift's destination button
			seta mv02 avar mv01 2
			slow
*	stim Wait (a bit)
			stim writ from 75 1
			spas ownr from
*	set start and stop Y values
			targ mv01
			setv mv10 ov10
			targ mv02
			setv mv11 ov10
			targ ownr
*	turn on light
			pose 1
*	remember who you're doing this for
			seta ov04 from
			stim writ ov04 75 0
* Aaaaand, GO!
*!			dbg: outs "callin' da loop"
			mesg writ ownr 1000
		else
*	there's no button above us!
*	stim Disappoint
*!			dbg: outs "well that was dumb"
			stim writ from 0 1
		endi
	else
*	the doors are closed man, you're too late
*	stim Disappoint
*!		dbg: outs "well that was dumb"
		stim writ from 0 1
	endi
endm

***main loop***
*Note, because of the LOCK in script 1000, this script might not get
* called whenver a call button is pressed. *However* at the end of
* script 1000, it checks for waiting call buttons.
* So it this script is ignored, doesn't matter
*ZootLift.TimingLoop
scrp 3 1 24401 1000
	lock
	loop
*!		dbg: outs "loopin' da loop"
		inst

*!		dbg: outs "looking for a button"
*There's probably a button waiting for us. (we're hopeful)
* Find it, then move the lift to it.

*		on a button, ov01 is button below
*				 ov02 is button above
*		numb upOrDown = random(up, down)
		setv va04 rand 1 2
*
		reps 2
*			targ ButtonCurrent
			targ mv01
			loop
*		get current call button's neighbor. either upper or lower depending on va04
*				if(upOrDown = up)     agnt nextButtonToCheck = this.ButtonAbove
*				else(upOrDown = down) agnt nextButtonToCheck = this.ButtonBelow
				targ avar targ va04
*				if(nextButtonToCheck != null)
				doif targ <> null
*					if(nextButtonToCheck.ButtonState = WaitingForLift)
					doif ov00 = 2
*Call button is waiting!
*						ButtonDestination = nextButtonToCheck
						seta mv02 targ
*						From = nextButtonToCheck.From
						seta mv04 ov04
					endi
				endi
*			untl ButtonDestination != null || nextButtonToCheck = null
			untl mv02 <> null or targ = null
*If va04 is 1, set it to 2, if it's 2, set it to 1.
*If upOrDown is up, set it to down, if it's down, set it to up.
			mulv va04 -1
			addv va04 3
*So, we loop twice even if we already found an answer. This gives a bias to the closest
* call buttons. I don't consider that a problem. Almost even a feature. meh.
		repe
*		if(ButtonDestination = null)
		doif mv02 = null
*No one wants a lift right now.
*NOT TRUE IF THERE ARE 3 OR MORE BUTTONS
*			dbg: outs "no one wants a lift"
			stop
		endi
*!		dbg: outs "found a button"

*
		targ ownr
*Set direction.
*		if(ButtonDestination.TargetX < posb)
		doif avar mv02 10 < posb
*!			dbg: outs "going up"
*			LiftState = GoingUp
			setv mv00 -1
*		else(ButtonDestination.TargetX >= posb)
		else
*!		dbg: asrt avar mv02 10 >= posb
*!			dbg: outs "going down"
*			LiftState = GoingDown
			setv mv00 1
		endi
*set lift original position and desination position
		setv mv10 posb
		setv mv11 avar mv02 10
*	lift button on
		pose 1

		doif ov04 = pntr
*		hand clicked the call button
			etch 4 0 0
				spas ownr targ
			next
		else
*		norn activated the lift
*			or call button and then got moved :-/
			doif touc ownr ov04 = 1
				spas ownr ov04
			endi
		endi

*	set origin call button to "not waiting, no lift"
		targ mv01
		setv ov00 0
		targ ownr
***speeding up
*	starts out as either 1 or -1
**dbg: outs "speeding up"
		setv va20 mv00
		mulv va20 0.5
		wait rand 0 5
		velo 0 va20
		mulv va20 0.75
		wait rand 1 2
		velo 0 va20
		mulv va20 3
		wait rand 3 4
		velo 0 va20
		mulv va20 1.5
		wait rand 6 8
		velo 0 va20
		mulv va20 1.5
		wait 4
		velo 0 va20
		mulv va20 1.25
		wait 7
		velo 0 va20
		mulv va20 1.25
		wait 2
		velo 0 va20
		mulv va20 1.25
		wait 3
		velo 0 va20
**dbg: outs "sped up"

***coasting
*	do we even want to coast? or are we so close, we need to panic and start paying attention, like right now?
		gsub gDst
		doif va30 > 200
*	be paranoid for a bit
*		check every tick
			setv va40 0
			loop
				wait 5
				gsub gDst
				addv va40 1
			untl va30 < 200 or va40 > 10
			doif va30 > 200
**	still a ways out
**		speed up a bit
*		mulv va20 1.25
*		velo 0 va20
*		wait rand 2 3
*		velo 0 va20
*		mulv va20 1.25
*	relax
*		now just check every little bit
				loop
					wait 20
					gsub gDst
				untl va30 < 200
			endi

		endi

		doif vely > 10 or vely < -10
*	holy crap we're going fast
*				(don't even know how, but whatever. we still need to fix the problem)
*	put on the brakes!
			setv va20 10
			mulv va20 mv00
			velo 0 va20
		endi
		doif vely > 5 or vely < -5
*	speeding a bit (still don't know how)
*	tap the brakes
			setv va20 vely
			loop
				addv va20 mv00
				velo 0 va20
			untl vely > 5 or vely < -5
		endi

**dbg: outs "slowing down"
*	slow down every ~10 pixels starting at 100
*		but randomize it because I think that makes it look slightly better
		setv va31 90
		setv va32 110
		setv va33 rand va31 va32
*	also, vely should be 5. slow down by -0.6 each tick to leave at vely at 2
		setv va36 mv00
		mulv va36 0.6
		loop
			loop
				wait 1
				gsub gDst
			untl va30 < va33
			subv va20 va36
			velo 0 va20
			subv va31 20
			subv va32 20
			setv va33 rand va31 va32
		untl va31 = -10
*					and va32 would be 10
*		this should leave us at ~20 pixels out and ~vely 2

		setv va33 rand 8 12
		loop
			wait 1
			inst
			gsub gDst
		untl va30 < va33

		velo 0 mv00

		setv va33 rand 8 12
		loop
			wait 1
			inst
			gsub gDst
		untl va30 < 2
		wait 1
		inst
***stopping
**dbg: outs "stopping"
		velo 0 0
*move lift to the absolute perfect spot (such things are achievable in games, so why not?)
		setv va29 mv11
		targ ownr
		subv va29 hght
		mvto posl va29
*	we have arrived
		targ ov04
		doif targ <> null
			doif carr = ownr
* 				stim "you have travelled in a lift"
				stim writ targ 94 1
			endi
		endi
*	set dest call button to "not waiting, has lift"
		targ mv02
		setv ov00 1
*	set self to "waiting"
		setv mv00 0
		seta mv01 mv02
		seta mv02 null
*	turn off light
		pose 0
		targ ownr
*	drop everything
		dpas 0 0 0
		pose 0
*	reset everything
		setv mv10 0
		setv mv11 0
		seta mv04 null
****dbg: outs "lift timer stop"
*loop back again. There we'll check for more waiting buttons
	ever

*	Gets distance returned as va20
*	va20, targ
	subr gDst
		targ ownr
		setv va30 mv11
		subv va30 posb
		mulv va30 mv00
	retn
endm

rscr
enum 3 1 24401
	kill targ
next
enum 2 12 24401
	kill targ
next
enum 2 12 24402
	kill targ
next
